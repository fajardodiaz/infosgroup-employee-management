// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: employee.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createEmployee = `-- name: CreateEmployee :one
INSERT INTO employee (
    employee_cod,
    full_name,
    birth,
    ingress_date,
    end_evaluation_date,
    phone,
    gender,
    state_id,
    position_id,
    team_id
)
VALUES(
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10
)
RETURNING id, employee_cod, full_name, birth, ingress_date, end_evaluation_date, phone, gender, created_at, state_id, position_id, team_id
`

type CreateEmployeeParams struct {
	EmployeeCod       string         `json:"employee_cod"`
	FullName          string         `json:"full_name"`
	Birth             time.Time      `json:"birth"`
	IngressDate       time.Time      `json:"ingress_date"`
	EndEvaluationDate time.Time      `json:"end_evaluation_date"`
	Phone             sql.NullString `json:"phone"`
	Gender            sql.NullString `json:"gender"`
	StateID           sql.NullInt32  `json:"state_id"`
	PositionID        sql.NullInt32  `json:"position_id"`
	TeamID            sql.NullInt32  `json:"team_id"`
}

func (q *Queries) CreateEmployee(ctx context.Context, arg CreateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, createEmployee,
		arg.EmployeeCod,
		arg.FullName,
		arg.Birth,
		arg.IngressDate,
		arg.EndEvaluationDate,
		arg.Phone,
		arg.Gender,
		arg.StateID,
		arg.PositionID,
		arg.TeamID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.EmployeeCod,
		&i.FullName,
		&i.Birth,
		&i.IngressDate,
		&i.EndEvaluationDate,
		&i.Phone,
		&i.Gender,
		&i.CreatedAt,
		&i.StateID,
		&i.PositionID,
		&i.TeamID,
	)
	return i, err
}

const deleteEmployee = `-- name: DeleteEmployee :exec
DELETE FROM employee
WHERE id = $1
`

func (q *Queries) DeleteEmployee(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEmployee, id)
	return err
}

const getEmployee = `-- name: GetEmployee :one
SELECT id, employee_cod, full_name, birth, ingress_date, end_evaluation_date, phone, gender, created_at, state_id, position_id, team_id FROM employee
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEmployee(ctx context.Context, id int64) (Employee, error) {
	row := q.db.QueryRowContext(ctx, getEmployee, id)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.EmployeeCod,
		&i.FullName,
		&i.Birth,
		&i.IngressDate,
		&i.EndEvaluationDate,
		&i.Phone,
		&i.Gender,
		&i.CreatedAt,
		&i.StateID,
		&i.PositionID,
		&i.TeamID,
	)
	return i, err
}

const listEmployees = `-- name: ListEmployees :many
SELECT id, employee_cod, full_name, birth, ingress_date, end_evaluation_date, phone, gender, created_at, state_id, position_id, team_id FROM employee
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListEmployeesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEmployees(ctx context.Context, arg ListEmployeesParams) ([]Employee, error) {
	rows, err := q.db.QueryContext(ctx, listEmployees, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Employee{}
	for rows.Next() {
		var i Employee
		if err := rows.Scan(
			&i.ID,
			&i.EmployeeCod,
			&i.FullName,
			&i.Birth,
			&i.IngressDate,
			&i.EndEvaluationDate,
			&i.Phone,
			&i.Gender,
			&i.CreatedAt,
			&i.StateID,
			&i.PositionID,
			&i.TeamID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEmployee = `-- name: UpdateEmployee :one
UPDATE employee set
employee_cod = $2,
full_name = $3,
birth = $4,
ingress_date = $5,
end_evaluation_date = $6,
phone = $7,
gender = $8,
state_id = $9,
position_id = $10,
team_id = $11
WHERE id = $1
RETURNING id, employee_cod, full_name, birth, ingress_date, end_evaluation_date, phone, gender, created_at, state_id, position_id, team_id
`

type UpdateEmployeeParams struct {
	ID                int64          `json:"id"`
	EmployeeCod       string         `json:"employee_cod"`
	FullName          string         `json:"full_name"`
	Birth             time.Time      `json:"birth"`
	IngressDate       time.Time      `json:"ingress_date"`
	EndEvaluationDate time.Time      `json:"end_evaluation_date"`
	Phone             sql.NullString `json:"phone"`
	Gender            sql.NullString `json:"gender"`
	StateID           sql.NullInt32  `json:"state_id"`
	PositionID        sql.NullInt32  `json:"position_id"`
	TeamID            sql.NullInt32  `json:"team_id"`
}

func (q *Queries) UpdateEmployee(ctx context.Context, arg UpdateEmployeeParams) (Employee, error) {
	row := q.db.QueryRowContext(ctx, updateEmployee,
		arg.ID,
		arg.EmployeeCod,
		arg.FullName,
		arg.Birth,
		arg.IngressDate,
		arg.EndEvaluationDate,
		arg.Phone,
		arg.Gender,
		arg.StateID,
		arg.PositionID,
		arg.TeamID,
	)
	var i Employee
	err := row.Scan(
		&i.ID,
		&i.EmployeeCod,
		&i.FullName,
		&i.Birth,
		&i.IngressDate,
		&i.EndEvaluationDate,
		&i.Phone,
		&i.Gender,
		&i.CreatedAt,
		&i.StateID,
		&i.PositionID,
		&i.TeamID,
	)
	return i, err
}
