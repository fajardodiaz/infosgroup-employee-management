// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: employee_project.sql

package database

import (
	"context"
)

const assignEmployeeToProject = `-- name: AssignEmployeeToProject :one
INSERT INTO employee_project(
    employee_id,
    project_id
) VALUES(
    $1, $2
)
RETURNING employee_id, project_id
`

type AssignEmployeeToProjectParams struct {
	EmployeeID int64 `json:"employee_id"`
	ProjectID  int64 `json:"project_id"`
}

func (q *Queries) AssignEmployeeToProject(ctx context.Context, arg AssignEmployeeToProjectParams) (EmployeeProject, error) {
	row := q.db.QueryRowContext(ctx, assignEmployeeToProject, arg.EmployeeID, arg.ProjectID)
	var i EmployeeProject
	err := row.Scan(&i.EmployeeID, &i.ProjectID)
	return i, err
}

const getEmployeeProjects = `-- name: GetEmployeeProjects :many
SELECT employee_id, project_id FROM employee_project
WHERE employee_id = $1
`

func (q *Queries) GetEmployeeProjects(ctx context.Context, employeeID int64) ([]EmployeeProject, error) {
	rows, err := q.db.QueryContext(ctx, getEmployeeProjects, employeeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeProject{}
	for rows.Next() {
		var i EmployeeProject
		if err := rows.Scan(&i.EmployeeID, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProjectEmployees = `-- name: GetProjectEmployees :many
SELECT employee_id, project_id FROM employee_project
WHERE project_id = $1
`

func (q *Queries) GetProjectEmployees(ctx context.Context, projectID int64) ([]EmployeeProject, error) {
	rows, err := q.db.QueryContext(ctx, getProjectEmployees, projectID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EmployeeProject{}
	for rows.Next() {
		var i EmployeeProject
		if err := rows.Scan(&i.EmployeeID, &i.ProjectID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeEmployeeProject = `-- name: RemoveEmployeeProject :exec
DELETE FROM employee_project 
WHERE employee_id = $1 AND project_id = $2
`

type RemoveEmployeeProjectParams struct {
	EmployeeID int64 `json:"employee_id"`
	ProjectID  int64 `json:"project_id"`
}

func (q *Queries) RemoveEmployeeProject(ctx context.Context, arg RemoveEmployeeProjectParams) error {
	_, err := q.db.ExecContext(ctx, removeEmployeeProject, arg.EmployeeID, arg.ProjectID)
	return err
}
